(1) Getsockopt allow socket options values to be queried and set,respectively.
int getsockopt (sockid, level, optName, optVal, optLen);
sockid: integer, socket descriptor
level: integer, the layers of the protocol stack (socket, TCP, IP)
optName: integer, option
optVal: pointer to a buffer; upon return it contains the value of the specified option
optLen: integer, in-out parameter it returns -1 if an error occurred
(2) Setsockopt
int setsockopt (sockid, level, optName, optVal, optLen);
optLen is now only an input parameter
(3) getpeername - get the name of the peer socket#include
<sys/socket.h>
int getpeername(int socket, struct sockaddr *address,socklen_t *address_len);
The getpeername() function retrieves the peer address of the specified socket, stores this address in the 
sockaddr structure pointed to by the address argument, and stores the length of thisaddress in the object
pointed to by the address_len argument.
- If the actual length of the address is greater than the length of the supplied sockaddrstructure, the
stored address will be truncated.
 If the protocol permits connections by unbound clients, and the peer is not bound,then the value 
stored in the object pointed to by address is unspecified.
(4) getsockname - get the socket name
include <sys/socket.h>
int getsockname(int socket, struct sockaddr *address,socklen_t *address_len);
The getsockname() function retrieves the locally-bound name of the specified socket,stores
his address in the sockaddr structure pointed to by the address argument, and stores the
lengthof this address in the object pointed to by the address_len argument.
If the actual length of the address is greater than the length of the supplied sockaddr
 structure, the stored address will be truncated.
If the socket has not been bound to a local name, the value stored in the object pointed
to by address is unspecified.
(5) readv and writev system calls:
These two functions are similar to read and write , but readv and writev let us read into or write
from one or more buffers with a single function call. These operations are called scatter read
(since the input data is scattered into multiple application buffers) and gather write (since
multiple buffers are gathered for a single output operation).
#include <sys/uio.h>
int readv(int fd , struct iovec iov[] , int iovcount) ;
int writev(int fd , struct iovec iov[] , int iovcount) ;
These two system calls use the following structure that is defined in
<syst/uio.h>:
struct iovec{
caddr_t iov_base; /*strating address of buffer*/
int iov_len; /*size of buffer in size*/
The writev system call write the buffers specified by iov[0], iov[1], throughiov[iovcount-1].
The readv sytem call does the input equivalent. It always fills one buffer (as specified but the
iov_len value) before proceeding to the next buffer in the iov array.
Both system calls return the total number of bytes read and written